package textbaisedgame;/* * Class Room - a room in a simple text based  adventure game. * * * "Room" represents one location in the scenery of the game.  It is * connected to at most four other rooms via exits.  The exits are labeled * north, east, south, west.  For each direction, the room stores a reference * to the neighbouring room, or null if there is no exit in that direction. */import java.util.Set;import java.util.HashMap;import java.util.Iterator;class Room{    private String description;    private HashMap exits;        // stores exits of this room.    private Item[] items;    private int numItems;    private int maxItems;    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a Stocker lab 107" or "an open yard".     */    public Room(String description)    {        this.description = description;        exits = new HashMap();        items = new Item[10];        numItems = 0;        maxItems = 9;    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room north, Room east, Room south, Room west)    {        if(north != null)            exits.put("north", north);        if(east != null)            exits.put("east", east);        if(south != null)            exits.put("south", south);        if(west != null)            exits.put("west", west);    }    /**     * adds items to room, currently rooms can only hold ten items.     * @param item      */    public void addItem(Item item){        if(numItems < maxItems){            items[numItems] = item;            numItems++;        }    }        /**     * removes items from room, stops at 0, removes first instance of item      * currently removes wrong item      */        public void removeItem(String item){        int place = 0;                while(place < numItems){            if(item.equals(items[place].getName())){                numItems--;                items[place] = items[numItems];                  return;            }                        place++;        }                           }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String shortDescription()    {        return description;    }    /**     * Return a long description of this room, on the form:     *     You are in the lab.     *     Exits: north west     */    public String longDescription()    {        return "You are in " + description + ".\n" + exitString() + "\n" + itemString();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     */    private String exitString()    {        String returnString = "Exits:";		Set keys = exits.keySet();        for(Iterator iter = keys.iterator(); iter.hasNext(); )            returnString += " " + iter.next();        return returnString;    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room nextRoom(String direction)    {        return (Room)exits.get(direction);    }        /**     * makes a list of items to return for display     * @return      */    public String itemString(){        String returnString = "Items:";        int place = 0;         while(place < numItems){            returnString += " ";            returnString += items[place].getName();            place++;        }        return returnString;    }        /**     * finds if item exist in room     */        public boolean hasItem(String name){        int place = 0;        boolean inRoom = false;        while(place < numItems){            if(name.equals(items[place].getName())){                inRoom = true;            }            place++;        }        return inRoom;    }        /**     * checks to see if room is at capacity for items.      */        public boolean isFull(){        if(numItems >= maxItems){            return true;        }else{            return false;        }    }        /**     * returns item called for by name of the item     */        public Item getItem(String name){        int place = 0;        while(place < numItems){            if(name.equals(items[place].getName())){                return items[place];            }            place++;        }        Item noItem = new Item("", 0, "");        return noItem;            }}