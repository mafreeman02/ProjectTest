package zork.demo;/** *  This class is the main class of the application. Zork is a very *  simple, text based adventure game.  Users can walk around some scenery. *  That's all. It should really be extended to make it more interesting! * *  To play this game, create an instance of this class and call the "play" *  routine. * *  This main class creates and initialises all the others: it creates all *  rooms, creates the parser and starts the game.  It also evaluates the *  commands that the parser returns. */class Game{    private Parser parser;    private Room currentRoom;    private Item[] inventory;    private Room lastRoom;    private int numInven;    private int maxItems;    private int maxWeight;    /**     * Create the game and initialise its internal map.     */    public Game()    {        createRooms();        parser = new Parser();        inventory = new Item[10];        numInven = 0;        maxItems = 10;        maxWeight = 50;            }    /**     * Create all the rooms and link their exits together.     */    private void createRooms()    {                // rooms for map implementation                Room center, left, right, up, down, upRight, upLeft, downRight, downLeft;        lockedRoom lockedLeft, lockedRight, lockedUp, lockedDown;                // create rooms for map implementation        center = new Room("The room you first found yourself in.");        left = new Room("The room left of the center room");        lockedLeft = new lockedRoom("The locked room to the left of the center room");        right = new Room("The room right of the center room");        lockedRight = new lockedRoom("The locked room on the right of the map");        up = new Room("The room that is above the center room");        lockedUp = new lockedRoom("The locked room at the top of the map");        down = new Room("The room below the center room");        lockedDown = new lockedRoom("The locked room at the bottom of the map");        upRight = new Room("The room at the top right of the map");        upLeft = new Room("The room at the top left of the map");        downRight = new Room("The Room at the bottom right of the map");        downLeft = new Room("The Room at the bottom left of the map");                // initialize room exits for the map implementaion                center.setExits(up, right, down, left);        left.setExits(upLeft, center, downLeft, lockedLeft);        lockedLeft.setExits(null, left, null, null);        lockedLeft.setKey("blue_Key");        right.setExits(upRight, lockedRight, downRight, center);        lockedRight.setExits(null, null, null, right);        lockedRight.setKey("red_key");        down.setExits(center, downRight, lockedDown, downLeft);        lockedDown.setExits(down, null, null, null);        lockedDown.setKey("yellow_key");        up.setExits(lockedUp, upRight, center, upLeft);        lockedUp.setExits(null, null, up, null);        lockedUp.setKey("indigo_key");        upRight.setExits(null, null, right, up);        upLeft.setExits(null, up, left, null);        downRight.setExits(right, down, null, null);        downLeft.setExits(left, null, null, down);                        // create items        Item note1 = new Item( "note_1", 1);        Item note2 = new Item("note_2", 1);        Item note3 = new Item( "note_3", 1);        Item note4 = new Item("note_4", 1);        Item redKey = new Item("red_key", 1);        Item blueKey = new Item("blue_key", 1);        Item yellowKey = new Item("yellow_key", 1);        Item indigoKey = new Item("indigo_key", 1);                note1.addDescription("You need");        note2.addDescription("to use");        note3.addDescription("the command");        note4.addDescription("win game");                redKey.addDescription("A red key, used to unlock the rightmost room.");        blueKey.addDescription("A blue key, used to unlock the leftmost room.");        yellowKey.addDescription("A yellow key, used to unlock the bottommost room.");        indigoKey.addDescription("A pretty key, used to unlock the topmost room.");                // add items to rooms         lockedLeft.addItem(note1);        lockedRight.addItem(note2);        lockedUp.addItem(note3);        lockedDown.addItem(note4);        center.addItem(redKey);        center.addItem(blueKey);        center.addItem(yellowKey);        center.addItem(indigoKey);               currentRoom = center;  // start game outside        lastRoom = center;    // temp    }    /**     *  Main play routine.  Loops until end of play.     */    public void play()    {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (! finished)        {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    /**     * Print out the opening message for the player.     */    private void printWelcome()    {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a new, incredibly boring adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    public boolean processCommand(Command command)    {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("go"))            goRoom(command);        else if(commandWord.equals("look"))            System.out.println(look(command));        else if(commandWord.equals("grab"))            grabItem(command);        else if(commandWord.equals("drop"))            dropItem(command);        else if(commandWord.equals("back"))            back();        else if(commandWord.equals("win")){            if(command.getSecondWord().equals("game")){                System.out.println("Congradulations you have won!!");                return true;            }        }else if(commandWord.equals("unlock")){            unlock(command.getSecondWord());        }        else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        return false;    }    // implementations of user commands:    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the     * command words.     */    private void printHelp()    {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at the Stocker Center.");        System.out.println();        System.out.println("Your command words are:");        parser.showCommands();    }    /**     * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command)    {        if(!command.hasSecondWord())        {            // if there is no second word, we don't know where to go...            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        // Try to leave current room.        Room nextRoom = currentRoom.nextRoom(direction);        if (nextRoom == null)            System.out.println("There is no door!");        else if(nextRoom.getLocked()){            System.out.println("The door is locked!");        }        else        {            lastRoom = currentRoom;            currentRoom = nextRoom;            System.out.println(currentRoom.longDescription());        }    }        /**     * command to grab item, removes item from room then adds it to inventory     */        private void grabItem(Command command){        if(!command.hasSecondWord())        {            // if there is no second word, we don't know what to grab..            System.out.println("Grab what?");            return;        }                        if(currentRoom.hasItem(command.getSecondWord())){            if(!currentRoom.getItem(command.getSecondWord()).getPickUpAble()){                System.out.print("Sorry you cannot pick up ");                System.out.println(command.getSecondWord());                return;            }            else if(maxWeight < this.getWeight() + currentRoom.getItem(command.getSecondWord()).getWeight()){                System.out.println("Your carrying too much to pick up this item.");                return;            }            this.getItem(command.getSecondWord());            currentRoom.removeItem(command.getSecondWord());            System.out.println("You have picked up the ");            System.out.println(command.getSecondWord());        }else{            System.out.print("There isn't an item called ");            System.out.println(command.getSecondWord());        }            }        /**     * command to drop item, removes from inventory then adds to room     */        private void dropItem(Command command){        if(!command.hasSecondWord())        {            // if there is no second word, we don't know what to drop..            System.out.println("Drop what?");            return;        }                if(findItem(command.getSecondWord()) == -1){            System.out.println("You arent carrying an item called that. ");        }else{            removeItem(command.getSecondWord());            System.out.println("You have dropped the ");            System.out.println(command.getSecondWord());        }            }        /**     * adds item to inventory, removes it from room     */        private void getItem(String item){        if((numInven - 1) < maxItems ){            inventory[numInven] = currentRoom.getItem(item);            numInven++;        }else{            System.out.println("You don't have enough room for that item");        }    }        /**     * removes item from inventory, removes first instance, places in room     * ^does not remove items properly if item is in front of the list     */        private void removeItem(String item){        int place = findItem(item);                if(place != -1){                        if(currentRoom.isFull()){                System.out.println("There's no room to put the item down");                return;            }            currentRoom.addItem(inventory[place]);            inventory[place] = inventory[(numInven - 1)];            numInven--;        }            }            /**     * finds item in inventory, gets first instance. Return value is index of item, value of -1 means item isn't in inventory.     */        private int findItem(String item){        int place = 0;                while(place <= (numInven - 1)){            if(item.equals(inventory[place].getName())){                return place;            }            place++;        }        return -1;    }        /**     * gets description of room, if inventory is second word lists items in inventory.     * If the second word appears as an item in either a room or the players inventory     * it gives a description of the item if the item has a description.       */        private String look(Command command){        String response ="";        if(!command.hasSecondWord()){            response = currentRoom.longDescription();        }else if(numInven == 0){            response = "There are no items in your inventory ";        }else if(command.getSecondWord().equals("inventory") || command.getCommandWord().equals("Inventory")){            int place = 0;            while(place <= (numInven - 1)){                response += " ";                response += inventory[place].getName();                place++;            }        }else if(findItem(command.getSecondWord()) != -1){            response = inventory[findItem(command.getSecondWord())].getDescription();        }else if(currentRoom.hasItem(command.getSecondWord())){            response = currentRoom.getItem(command.getSecondWord()).getDescription();        }        else{            response = "I don't know what you want me to look at.";        }        return response;    }        /**     * gives back total weight of inventory     */        public int getWeight(){        int place = 0;        int total = 0;                while(place < (numInven - 1)){            total = inventory[place].getWeight();            place++;        }                return total;    }        /**     * sends player back to room they were previously in     */    public void back(){        Room temp;        temp = currentRoom;        currentRoom = lastRoom;        lastRoom = temp;                        System.out.println(currentRoom.longDescription());                   }        public void unlock(String direction){        if(currentRoom.nextRoom(direction) == null){            System.out.println("There is no door in that direction!");        }        else if(!currentRoom.nextRoom(direction).getLocked()){            System.out.println("The door is not locked!");        }        else{            lockedRoom temp = currentRoom.nextLockedRoom(direction);            if(findItem(temp.getKey()) == -1){                System.out.println("You do not have the key to unlock this door!");            }else{                temp.setLocked(false);                System.out.println("The door has been unlocked!");            }        }    }    //Returns the current room's short discription    public String getCurrentRoomDesc()    {        return currentRoom.shortDescription();    }    public Room getCurrentRoom() {        return currentRoom;    }}